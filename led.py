import machineimport time# noinspection PyUnresolvedReferences,PyArgumentListclass Led:    DEFAULT_PULSE_WIDTH = 1000    STATE_OFF = 0    STATE_ON = 1    STATE_TOGGLE = 2    def __init__(self, pin):        self.pulse_width = Led.DEFAULT_PULSE_WIDTH        self.state = None        self.start = None        self.led_pin = pin        self.pin = machine.Pin(self.led_pin, machine.Pin.OUT)        self.off(poll=True)    def __repr__(self):        return '<Led: On pin {} at {:x}>'.format(self.led_pin, id(self))    def poll(self):        if self.state == Led.STATE_OFF:            if self.pin.value() != 0:                self.pin.value(0)        elif self.state == Led.STATE_ON:            if self.pin.value() == 0:                self.pin.value(1)        elif self.state == Led.STATE_TOGGLE:            if self.start is None:                self.start = time.ticks_ms()            else:                ticked = time.ticks_ms()                if time.ticks_diff(ticked, self.start) >= self.pulse_width:                    self.pin.value(not self.pin.value())                    self.start = ticked    def off(self, poll=False):        self.start = None        self.state = Led.STATE_OFF        if poll:            self.poll()    def on(self, poll=False):        self.start = None        self.state = Led.STATE_ON        if poll:            self.poll()    def toggle(self, pulse_width=None):        if self.state != Led.STATE_TOGGLE:            self.state = Led.STATE_TOGGLE            self.start = None        if pulse_width and pulse_width != self.pulse_width:            self.pulse_width = pulse_width    def close(self):        self.off(poll=True)